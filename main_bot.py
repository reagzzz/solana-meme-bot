"""
Module principal du bot de trading Solana
Orchestre tous les composants et g√®re le cycle de vie du syst√®me
"""
import asyncio
import logging
import signal
import sys
import time
from typing import Dict, Any, Optional
import redis
from datetime import datetime

from config import Config
from models import TokenData, StreamEvent
from solana_monitor import SolanaMonitor
from market_analyzer import MarketAnalyzer
from stream_filter import StreamFilter
from social_monitor import SocialMonitor
from notification_system import NotificationService

class SolanaMemeBot:
    """Bot principal de trading des meme coins Solana"""
    
    def __init__(self, config_path: Optional[str] = None):
        # Configuration
        self.config = Config(config_path)
        
        # Configuration du logging
        self._setup_logging()
        self.logger = logging.getLogger(__name__)
        
        # Redis pour le cache et les queues
        self.redis_client = redis.Redis(
            host=self.config.REDIS_HOST,
            port=self.config.REDIS_PORT,
            db=self.config.REDIS_DB,
            decode_responses=True
        )
        
        # Composants principaux
        self.solana_monitor = SolanaMonitor(self.config)
        self.market_analyzer = None  # Initialis√© dans start()
        self.stream_filter = StreamFilter(self.config, self.redis_client)
        self.social_monitor = SocialMonitor(self.config)
        self.notification_service = NotificationService(self.config)
        
        # √âtat du syst√®me
        self.running = False
        self.start_time = None
        self.stats = {
            'tokens_discovered': 0,
            'tokens_analyzed': 0,
            'notifications_sent': 0,
            'uptime_seconds': 0
        }
        
        # Gestionnaire de signaux pour arr√™t propre
        signal.signal(signal.SIGINT, self._signal_handler)
        signal.signal(signal.SIGTERM, self._signal_handler)
    
    def _setup_logging(self):
        """Configurer le syst√®me de logging"""
        logging.basicConfig(
            level=getattr(logging, self.config.LOG_LEVEL.upper()),
            format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
            handlers=[
                logging.FileHandler('solana_meme_bot.log'),
                logging.StreamHandler(sys.stdout)
            ]
        )
    
    def _signal_handler(self, signum, frame):
        """Gestionnaire de signaux pour arr√™t propre"""
        self.logger.info(f"Signal {signum} re√ßu, arr√™t du bot...")
        asyncio.create_task(self.stop())
    
    async def start(self):
        """D√©marrer le bot"""
        try:
            self.logger.info("üöÄ D√©marrage du Solana Meme Bot...")
            self.start_time = time.time()
            self.running = True
            
            # V√©rifier les connexions
            await self._check_connections()
            
            # Initialiser les composants
            await self._initialize_components()
            
            # Configurer les callbacks
            self._setup_callbacks()
            
            # D√©marrer les services
            await self._start_services()
            
            self.logger.info("‚úÖ Bot d√©marr√© avec succ√®s!")
            
            # Envoyer notification de d√©marrage
            await self._send_startup_notification()
            
            # Boucle principale
            await self._main_loop()
            
        except Exception as e:
            self.logger.error(f"Erreur lors du d√©marrage: {e}")
            await self.stop()
            raise
    
    async def stop(self):
        """Arr√™ter le bot"""
        if not self.running:
            return
        
        self.logger.info("üõë Arr√™t du bot en cours...")
        self.running = False
        
        try:
            # Arr√™ter les services
            await self._stop_services()
            
            # Envoyer notification d'arr√™t
            await self._send_shutdown_notification()
            
            self.logger.info("‚úÖ Bot arr√™t√© proprement")
            
        except Exception as e:
            self.logger.error(f"Erreur lors de l'arr√™t: {e}")
    
    async def _check_connections(self):
        """V√©rifier les connexions aux services externes"""
        self.logger.info("V√©rification des connexions...")
        
        # V√©rifier Redis
        try:
            self.redis_client.ping()
            self.logger.info("‚úÖ Connexion Redis OK")
        except Exception as e:
            self.logger.error(f"‚ùå Erreur connexion Redis: {e}")
            raise
        
        # V√©rifier les APIs (optionnel)
        # Dans une impl√©mentation compl√®te, v√©rifier les APIs Solana, Twitter, etc.
        
        self.logger.info("‚úÖ Toutes les connexions sont op√©rationnelles")
    
    async def _initialize_components(self):
        """Initialiser tous les composants"""
        self.logger.info("Initialisation des composants...")
        
        # Initialiser l'analyseur de march√© avec gestionnaire de contexte
        self.market_analyzer = MarketAnalyzer(self.config)
        
        self.logger.info("‚úÖ Composants initialis√©s")
    
    def _setup_callbacks(self):
        """Configurer les callbacks entre composants"""
        self.logger.info("Configuration des callbacks...")
        
        # Callback pour nouveaux tokens d√©tect√©s
        self.solana_monitor.add_callback('new_token', self._handle_new_token)
        
        # Callback pour posts sociaux
        self.social_monitor.add_callback('social_post', self._handle_social_post)
        self.social_monitor.add_callback('social_alert', self._handle_social_alert)
        
        self.logger.info("‚úÖ Callbacks configur√©s")
    
    async def _start_services(self):
        """D√©marrer tous les services"""
        self.logger.info("D√©marrage des services...")
        
        # D√©marrer le service de notifications
        await self.notification_service.start()
        
        # D√©marrer le filtre de flux
        asyncio.create_task(self.stream_filter.start_filtering())
        
        # D√©marrer les t√¢ches de surveillance
        asyncio.create_task(self.solana_monitor.start_monitoring())
        asyncio.create_task(self.social_monitor.start_monitoring())
        
        # D√©marrer les t√¢ches de maintenance
        asyncio.create_task(self._stats_reporter())
        asyncio.create_task(self._health_checker())
        
        self.logger.info("‚úÖ Services d√©marr√©s")
    
    async def _stop_services(self):
        """Arr√™ter tous les services"""
        self.logger.info("Arr√™t des services...")
        
        # Arr√™ter la surveillance
        await self.solana_monitor.stop_monitoring()
        await self.stream_filter.stop_filtering()
        
        # Arr√™ter les notifications
        await self.notification_service.stop()
        
        self.logger.info("‚úÖ Services arr√™t√©s")
    
    async def _handle_new_token(self, token_data: TokenData):
        """G√©rer la d√©tection d'un nouveau token"""
        try:
            self.stats['tokens_discovered'] += 1
            self.logger.info(f"Nouveau token d√©tect√©: {token_data.symbol}")
            
            # Analyser les donn√©es de march√©
            async with self.market_analyzer:
                enriched_token = await self.market_analyzer.analyze_token_market_data(token_data)
                
                # √âvaluer l'opportunit√© de trading
                opportunity = await self.market_analyzer.evaluate_trading_opportunity(enriched_token)
                
                self.stats['tokens_analyzed'] += 1
                
                # Cr√©er un √©v√©nement pour le filtre de flux
                event = StreamEvent(
                    event_type='new_token',
                    timestamp=int(time.time()),
                    data=enriched_token.to_dict(),
                    source='solana_monitor'
                )
                
                # Ajouter l'√©valuation aux donn√©es
                event.data['trading_opportunity'] = opportunity
                
                # Envoyer au filtre de flux
                await self.stream_filter.add_event(event)
                
        except Exception as e:
            self.logger.error(f"Erreur lors du traitement du nouveau token: {e}")
    
    async def _handle_social_post(self, post):
        """G√©rer un nouveau post de r√©seau social"""
        try:
            # Cr√©er un √©v√©nement pour le filtre de flux
            event = StreamEvent(
                event_type='social_mention',
                timestamp=post.timestamp,
                data={
                    'user': post.author,
                    'token_address': post.related_token_mint_address,
                    'content': post.content,
                    'sentiment_score': post.sentiment_score,
                    'platform': post.platform,
                    'engagement': post.engagement_metrics.to_dict() if post.engagement_metrics else {}
                },
                source='social_monitor'
            )
            
            # Envoyer au filtre de flux
            await self.stream_filter.add_event(event)
            
        except Exception as e:
            self.logger.error(f"Erreur lors du traitement du post social: {e}")
    
    async def _handle_social_alert(self, alert):
        """G√©rer une alerte sociale"""
        try:
            self.logger.info(f"Alerte sociale: {alert.description}")
            
            # Envoyer une notification si l'urgence est √©lev√©e
            if alert.urgency == 'high':
                # Cr√©er une notification d'alerte
                # Dans une impl√©mentation compl√®te, cr√©er un message d'alerte appropri√©
                pass
                
        except Exception as e:
            self.logger.error(f"Erreur lors du traitement de l'alerte sociale: {e}")
    
    async def _main_loop(self):
        """Boucle principale du bot"""
        self.logger.info("Boucle principale d√©marr√©e")
        
        while self.running:
            try:
                # Mettre √† jour les statistiques
                self.stats['uptime_seconds'] = int(time.time() - self.start_time)
                
                # Attendre avant la prochaine it√©ration
                await asyncio.sleep(1)
                
            except Exception as e:
                self.logger.error(f"Erreur dans la boucle principale: {e}")
                await asyncio.sleep(5)
    
    async def _stats_reporter(self):
        """Reporter les statistiques p√©riodiquement"""
        while self.running:
            try:
                await asyncio.sleep(300)  # Toutes les 5 minutes
                
                # Collecter les statistiques de tous les composants
                comprehensive_stats = await self._collect_comprehensive_stats()
                
                self.logger.info(f"üìä Statistiques: {comprehensive_stats}")
                
                # Envoyer un rapport de statut toutes les heures
                if self.stats['uptime_seconds'] % 3600 < 300:  # Proche de l'heure
                    await self.notification_service.send_system_status()
                
            except Exception as e:
                self.logger.error(f"Erreur lors du rapport de statistiques: {e}")
    
    async def _health_checker(self):
        """V√©rificateur de sant√© du syst√®me"""
        while self.running:
            try:
                await asyncio.sleep(60)  # Toutes les minutes
                
                # V√©rifier la sant√© des composants
                health_status = await self._check_system_health()
                
                if not health_status['healthy']:
                    self.logger.warning(f"‚ö†Ô∏è Probl√®me de sant√© d√©tect√©: {health_status}")
                    
                    # Envoyer une alerte si critique
                    if health_status['critical']:
                        await self._send_health_alert(health_status)
                
            except Exception as e:
                self.logger.error(f"Erreur lors de la v√©rification de sant√©: {e}")
    
    async def _collect_comprehensive_stats(self) -> Dict[str, Any]:
        """Collecter les statistiques de tous les composants"""
        stats = {
            'bot_stats': self.stats.copy(),
            'stream_filter_stats': self.stream_filter.get_system_stats(),
            'notification_stats': self.notification_service.get_comprehensive_stats(),
            'social_monitor_stats': self.social_monitor.get_stats()
        }
        
        return stats
    
    async def _check_system_health(self) -> Dict[str, Any]:
        """V√©rifier la sant√© du syst√®me"""
        health = {
            'healthy': True,
            'critical': False,
            'issues': []
        }
        
        try:
            # V√©rifier Redis
            self.redis_client.ping()
        except Exception as e:
            health['healthy'] = False
            health['critical'] = True
            health['issues'].append(f"Redis inaccessible: {e}")
        
        # V√©rifier les statistiques des composants
        stream_stats = self.stream_filter.get_system_stats()
        if not stream_stats['running']:
            health['healthy'] = False
            health['issues'].append("Stream filter arr√™t√©")
        
        # V√©rifier la queue de notifications
        notification_stats = self.notification_service.get_comprehensive_stats()
        queue_size = notification_stats['queue_stats']['queue_size']
        if queue_size > 100:  # Queue trop pleine
            health['healthy'] = False
            health['issues'].append(f"Queue de notifications pleine: {queue_size}")
        
        return health
    
    async def _send_startup_notification(self):
        """Envoyer une notification de d√©marrage"""
        try:
            if self.notification_service.telegram_notifier:
                await self.notification_service.telegram_notifier.send_alert(
                    "üöÄ Bot D√©marr√©",
                    f"Le Solana Meme Bot a d√©marr√© avec succ√®s √† {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}",
                    "low"
                )
        except Exception as e:
            self.logger.error(f"Erreur lors de l'envoi de la notification de d√©marrage: {e}")
    
    async def _send_shutdown_notification(self):
        """Envoyer une notification d'arr√™t"""
        try:
            if self.notification_service.telegram_notifier:
                uptime = time.time() - self.start_time
                await self.notification_service.telegram_notifier.send_alert(
                    "üõë Bot Arr√™t√©",
                    f"Le Solana Meme Bot s'est arr√™t√© apr√®s {uptime/3600:.1f} heures de fonctionnement.",
                    "medium"
                )
        except Exception as e:
            self.logger.error(f"Erreur lors de l'envoi de la notification d'arr√™t: {e}")
    
    async def _send_health_alert(self, health_status: Dict[str, Any]):
        """Envoyer une alerte de sant√©"""
        try:
            if self.notification_service.telegram_notifier:
                issues_text = "\n".join(f"‚Ä¢ {issue}" for issue in health_status['issues'])
                urgency = "high" if health_status['critical'] else "medium"
                
                await self.notification_service.telegram_notifier.send_alert(
                    "‚ö†Ô∏è Alerte Syst√®me",
                    f"Probl√®mes d√©tect√©s:\n{issues_text}",
                    urgency
                )
        except Exception as e:
            self.logger.error(f"Erreur lors de l'envoi de l'alerte de sant√©: {e}")
    
    def get_status(self) -> Dict[str, Any]:
        """Obtenir le statut complet du bot"""
        return {
            'running': self.running,
            'start_time': self.start_time,
            'uptime_seconds': self.stats['uptime_seconds'],
            'stats': self.stats,
            'config': {
                'solana_rpc_url': self.config.SOLANA_RPC_URL,
                'notification_channels': self.config.NOTIFICATION_CHANNELS,
                'filter_criteria': self.config.DEFAULT_FILTER_CRITERIA
            }
        }

async def main():
    """Fonction principale"""
    bot = None
    try:
        # Cr√©er et d√©marrer le bot
        bot = SolanaMemeBot()
        await bot.start()
        
    except KeyboardInterrupt:
        print("\nüõë Interruption clavier d√©tect√©e")
    except Exception as e:
        print(f"‚ùå Erreur fatale: {e}")
        logging.error(f"Erreur fatale: {e}", exc_info=True)
    finally:
        if bot:
            await bot.stop()

if __name__ == "__main__":
    # D√©marrer le bot
    asyncio.run(main())

